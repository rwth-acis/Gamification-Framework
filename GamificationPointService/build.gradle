buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }
    dependencies {
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'
        classpath 'io.github.swagger2markup:swagger2markup-import-files-ext:1.3.1'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'eclipse' // only required when using Eclipse
    id 'com.benjaminsproule.swagger' version '1.0.8'
}

apply plugin: 'io.github.swagger2markup'

repositories {
    // Use mavenCentral for resolving dependencies.
    mavenCentral()

    // DBIS Archiva
    maven {
        url "https://archiva.dbis.rwth-aachen.de:9911/repository/internal/"
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation "junit:junit:4.13.2"

    // las2peer bundle which is not necessary in the runtime path
    // compileOnly will be moved into the lib dir afterwards
    implementation "i5:las2peer-bundle:${project.property('core.version')}"

    // Add service dependencies here
	
	implementation "net.minidev:json-smart:1.3.1"
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.0'
	implementation "commons-logging:commons-logging:1.1.3"
	implementation "commons-fileupload:commons-fileupload:1.3.1"
	implementation "org.imgscalr:imgscalr-lib:4.2"
	implementation "org.apache.httpcomponents:httpmime:4.3.1"
	
	implementation('javax.ws.rs:javax.ws.rs-api:2.0.1') {
        force = true
    }
	
	//uses jersey transitive from las2peer-bundle
	implementation 'commons-fileupload:commons-fileupload:1.3.3'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.12.5'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'
	implementation "io.swagger:swagger-annotations:1.6.2"

    implementation project(":gamification-commons")
}

configurations {
    // This ensures las2peer is available in the tests, but won't be bundled
    testCompile.extendsFrom compileOnly
}

jar {
    manifest {
        attributes "Main-Class": "${project.property('service.name')}.${project.property('service.class')}"
        attributes "Library-Version": "${project.property('service.version')}"
        attributes "Library-SymbolicName": "${project.property('service.name')}"
    }

    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
        // Exclude signatures to be able to natively bundle signed jars
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }

    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

application {
    // Define the main class for the application.
    mainClass = "${project.property('service.name')}.${project.property('service.class')}"

    group = "${project.property('service.name')}"
    archivesBaseName = group

    version = "${project.property('service.version')}"
    mainClassName = "i5.las2peer.tools.L2pNodeLauncher"
    sourceCompatibility = "${project.property('java.version')}"
    targetCompatibility = "${project.property('java.version')}"
}

// put all .jar files into export/jars folder
tasks.withType(Jar) {
     duplicatesStrategy = 'include'
    destinationDir = file("$projectDir/export/jars")
}

javadoc {
    destinationDir = file("$projectDir/export/doc")
}

swagger {
    apiSource {
        springmvc = false
        locations = ['i5.las2peer.services.gamificationPointService']
        schemes = ['http', 'https']
        host = 'www.example.com:8080'
        basePath = '/gamification/points'
        swaggerDirectory = "${project.buildDir}/swagger-ui"
    }
}

convertSwagger2markup {
    swaggerInput file("${project.buildDir}/swagger-ui/swagger.json").getAbsolutePath()
    outputDir file("${project.rootDir}/docs/api/point-service")
    config = [
            'swagger2markup.markupLanguage' : 'ASCIIDOC',
            'swagger2markup.pathsGroupedBy' : 'TAGS',
            'swagger2markup.interDocumentCrossReferencesEnabled': true,
            'swagger2markup.overviewDocument': 'README',
            'swagger2markup.extensions.dynamicOverview.contentPath' : file('src/docs/asciidoc/extensions/overview').absolutePath
    ]
}

build.dependsOn "javadoc"

compileJava {
    dependsOn "copyMain"
}

compileTestJava {
    dependsOn "copyTest"
}

// Copies .xml files into build directory
task copyMain(type: Copy) {
    from "src/main/java"
    into "$buildDir/classes/java/main"
}

// Copies .xml files into build directory
task copyTest(type: Copy) {
    from "src/test/java"
    into "$buildDir/classes/java/test"
}

// These two tasks restore the build and runtime environment used
// in the ant environment
task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into "$projectDir/service"
}

task copyJarToGame(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into "$rootDir/GamificationGameService/service"
}

task copyJarToGame2(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into "$rootDir/GamificationGameService/lib"
}

task copyJarToVis(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into "$rootDir/GamificationVisualizationService/lib"
}

task copyToLib(type: Copy) {
    from configurations.compileClasspath
    into "$projectDir/lib"
}

build.dependsOn copyJar
build.dependsOn copyToLib
build.dependsOn copyJarToGame
build.dependsOn copyJarToGame2
build.dependsOn copyJarToVis

task startscripts {
    new File("$projectDir/bin", "start_network.sh").text = """#!/bin/bash
# this script is autogenerated by 'gradle startscripts'
# it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
# pls execute it from the root folder of your deployment, e. g. ./etc/bin/start_network.sh
java -cp "lib/*" i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService\\(\\'${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}\\'\\) startWebConnector interactive
""" 
    new File("$projectDir/bin", "start_network.bat").text = """:: this script is autogenerated by 'gradle startscripts'
:: it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
:: pls execute it from the bin folder of your deployment by double-clicking on it
%~d0
cd %~p0
cd ..
set BASE=%CD%
set CLASSPATH="%BASE%/lib/*;"
set L2P_JAR_PATH="%BASE%/lib/las2peer-bundle-${project.property('core.version')}.jar"

java -cp %CLASSPATH% -jar %L2P_JAR_PATH% --port 9011 --service-directory service uploadStartupDirectory startService('${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}') startWebConnector interactive
pause
"""
}

build.dependsOn "startscripts"

def startup = "$projectDir/etc/startup"
def userAgent1Path = "${startup}/agent-user-${project.property('las2peer_user1.name')}.xml"
def userAgent2Path = "${startup}/agent-user-${project.property('las2peer_user2.name')}.xml"
def userAgent3Path = "${startup}/agent-user-${project.property('las2peer_user3.name')}.xml"
def passphrasesPath = "${startup}/passphrases.txt"

task generateUserAgent1 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent1Path).exists()) }

    doLast {
        tasks.create("generateUserAgent1Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent1Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user1.password')}", "${project.property('las2peer_user1.name')}", "${project.property('las2peer_user1.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent1Path)
        }.exec()
    }
}

task generateUserAgent2 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent2Path).exists()) }

    doLast {
        tasks.create("generateUserAgent2Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent2Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user2.password')}", "${project.property('las2peer_user2.name')}", "${project.property('las2peer_user2.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent2Path)
        }.exec()
    }
}

task generateUserAgent3 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent3Path).exists()) }

    doLast {
        tasks.create("generateUserAgent3Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent3Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user3.password')}", "${project.property('las2peer_user3.name')}", "${project.property('las2peer_user3.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent3Path)
        }.exec()
    }
}

// generate example user agents
task generateAgents {
    description "Generate example user agents"
    dependsOn "generateUserAgent1"
    dependsOn "generateUserAgent2"
    dependsOn "generateUserAgent3"

    doLast {
        new File(passphrasesPath).text = """agent-user-${project.property('las2peer_user1.name')}.xml;${project.property('las2peer_user1.password')}
agent-user-${project.property('las2peer_user2.name')}.xml;${project.property('las2peer_user2.password')}
agent-user-${project.property('las2peer_user3.name')}.xml;${project.property('las2peer_user3.password')}
        """
    }
}

build.dependsOn "generateAgents"

clean.doLast {
    file("$projectDir/tmp").deleteDir()
    file("$projectDir/lib").deleteDir()
    file("$projectDir/servicebundle").deleteDir()
    file("$projectDir/service").deleteDir()
    file("$projectDir/etc/startup").deleteDir()
    file("$projectDir/export").deleteDir()
	file("$projectDir/log").deleteDir()
	file("$projectDir/bin").deleteDir()
	file("$projectDir/output").deleteDir()
}

task cleanAll {
    dependsOn "clean"

    doLast {
        file("$projectDir/log").deleteDir()
        file("$projectDir/node-storage").deleteDir()
    }
}

test {
    workingDir = file("$projectDir")
}

// Only required when using Eclipse:
// configuration for eclipse (this allows to import the project as a gradle project in eclipse without any problems)
/*eclipse {
    classpath {
      file {
            whenMerged {
                // change output directory for test, main, resources and default
                def main = entries.find { it.path == "src/main/java" }
                main.output = "output/main"

                def test = entries.find { it.path == "src/test/java" }
                test.output = "output/test"

                def defaultEntry = entries.find { it.kind == "output" && it.path == "bin/default" }
                defaultEntry.path = "output/default"
            }
        }
    }
}*/