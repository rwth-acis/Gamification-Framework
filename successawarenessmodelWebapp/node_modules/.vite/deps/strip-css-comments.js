import "./chunk-BPKF3OQJ.js";

// node_modules/is-regexp/index.js
var { toString } = Object.prototype;
function isRegexp(value) {
  return toString.call(value) === "[object RegExp]";
}

// node_modules/strip-css-comments/index.js
function stripCssComments(cssString, { preserve = true, whitespace = true, all } = {}) {
  if (all) {
    throw new Error("The `all` option is no longer supported. Use the `preserve` option instead.");
  }
  let preserveImportant = preserve;
  let preserveFilter;
  if (typeof preserve === "function") {
    preserveImportant = false;
    preserveFilter = preserve;
  } else if (isRegexp(preserve)) {
    preserveImportant = false;
    preserveFilter = (comment2) => preserve.test(comment2);
  }
  let isInsideString = false;
  let currentCharacter = "";
  let comment = "";
  let returnValue = "";
  for (let index = 0; index < cssString.length; index++) {
    currentCharacter = cssString[index];
    if (cssString[index - 1] !== "\\" && (currentCharacter === '"' || currentCharacter === "'")) {
      if (isInsideString === currentCharacter) {
        isInsideString = false;
      } else if (!isInsideString) {
        isInsideString = currentCharacter;
      }
    }
    if (!isInsideString && currentCharacter === "/" && cssString[index + 1] === "*") {
      const isImportantComment = cssString[index + 2] === "!";
      let index2 = index + 2;
      for (; index2 < cssString.length; index2++) {
        if (cssString[index2] === "*" && cssString[index2 + 1] === "/") {
          if (preserveImportant && isImportantComment || preserveFilter && preserveFilter(comment)) {
            returnValue += `/*${comment}*/`;
          } else if (!whitespace) {
            if (cssString[index2 + 2] === "\n") {
              index2++;
            } else if (cssString[index2 + 2] + cssString[index2 + 3] === "\r\n") {
              index2 += 2;
            }
          }
          comment = "";
          break;
        }
        comment += cssString[index2];
      }
      index = index2 + 1;
      continue;
    }
    returnValue += currentCharacter;
  }
  return returnValue;
}
export {
  stripCssComments as default
};
//# sourceMappingURL=strip-css-comments.js.map
