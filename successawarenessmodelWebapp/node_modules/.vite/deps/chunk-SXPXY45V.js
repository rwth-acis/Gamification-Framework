import {
  __reExport
} from "./chunk-BPKF3OQJ.js";

// node_modules/tslib/tslib.es6.js
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

// external:lit
var lit_exports = {};
__reExport(lit_exports, lit_star);
import * as lit_star from "lit";

// node_modules/@vaadin/common-frontend/ConnectionIndicator.js
import { property } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";

// node_modules/@vaadin/common-frontend/ConnectionState.js
var _a;
var ConnectionState;
(function(ConnectionState2) {
  ConnectionState2["CONNECTED"] = "connected";
  ConnectionState2["LOADING"] = "loading";
  ConnectionState2["RECONNECTING"] = "reconnecting";
  ConnectionState2["CONNECTION_LOST"] = "connection-lost";
})(ConnectionState || (ConnectionState = {}));
var ConnectionStateStore = class {
  constructor(initialState) {
    this.stateChangeListeners = /* @__PURE__ */ new Set();
    this.loadingCount = 0;
    this.connectionState = initialState;
    this.serviceWorkerMessageListener = this.serviceWorkerMessageListener.bind(this);
    if (navigator.serviceWorker) {
      navigator.serviceWorker.addEventListener("message", this.serviceWorkerMessageListener);
      navigator.serviceWorker.ready.then((registration) => {
        var _a2;
        (_a2 = registration === null || registration === void 0 ? void 0 : registration.active) === null || _a2 === void 0 ? void 0 : _a2.postMessage({
          method: "Vaadin.ServiceWorker.isConnectionLost",
          id: "Vaadin.ServiceWorker.isConnectionLost"
        });
      });
    }
  }
  addStateChangeListener(listener) {
    this.stateChangeListeners.add(listener);
  }
  removeStateChangeListener(listener) {
    this.stateChangeListeners.delete(listener);
  }
  loadingStarted() {
    this.state = ConnectionState.LOADING;
    this.loadingCount += 1;
  }
  loadingFinished() {
    this.decreaseLoadingCount(ConnectionState.CONNECTED);
  }
  loadingFailed() {
    this.decreaseLoadingCount(ConnectionState.CONNECTION_LOST);
  }
  decreaseLoadingCount(finalState) {
    if (this.loadingCount > 0) {
      this.loadingCount -= 1;
      if (this.loadingCount === 0) {
        this.state = finalState;
      }
    }
  }
  get state() {
    return this.connectionState;
  }
  set state(newState) {
    if (newState !== this.connectionState) {
      const prevState = this.connectionState;
      this.connectionState = newState;
      this.loadingCount = 0;
      for (const listener of this.stateChangeListeners) {
        listener(prevState, this.connectionState);
      }
    }
  }
  get online() {
    return this.connectionState === ConnectionState.CONNECTED || this.connectionState === ConnectionState.LOADING;
  }
  get offline() {
    return !this.online;
  }
  serviceWorkerMessageListener(event) {
    if (typeof event.data === "object" && event.data.id === "Vaadin.ServiceWorker.isConnectionLost") {
      if (event.data.result === true) {
        this.state = ConnectionState.CONNECTION_LOST;
      }
      navigator.serviceWorker.removeEventListener("message", this.serviceWorkerMessageListener);
    }
  }
};
var $wnd = window;
if (!((_a = $wnd.Vaadin) === null || _a === void 0 ? void 0 : _a.connectionState)) {
  $wnd.Vaadin = $wnd.Vaadin || {};
  $wnd.Vaadin.connectionState = new ConnectionStateStore(navigator.onLine ? ConnectionState.CONNECTED : ConnectionState.CONNECTION_LOST);
}

// node_modules/@vaadin/common-frontend/ConnectionIndicator.js
var DEFAULT_STYLE_ID = "css-loading-indicator";
var LoadingBarState;
(function(LoadingBarState2) {
  LoadingBarState2["IDLE"] = "";
  LoadingBarState2["FIRST"] = "first";
  LoadingBarState2["SECOND"] = "second";
  LoadingBarState2["THIRD"] = "third";
})(LoadingBarState || (LoadingBarState = {}));
var ConnectionIndicator = class extends lit_exports.LitElement {
  constructor() {
    super();
    this.firstDelay = 300;
    this.secondDelay = 1500;
    this.thirdDelay = 5e3;
    this.expandedDuration = 2e3;
    this.onlineText = "Online";
    this.offlineText = "Connection lost";
    this.reconnectingText = "Connection lost, trying to reconnect...";
    this.offline = false;
    this.reconnecting = false;
    this.expanded = false;
    this.loading = false;
    this.loadingBarState = LoadingBarState.IDLE;
    this.applyDefaultThemeState = true;
    this.firstTimeout = 0;
    this.secondTimeout = 0;
    this.thirdTimeout = 0;
    this.expandedTimeout = 0;
    this.lastMessageState = ConnectionState.CONNECTED;
    this.connectionStateListener = () => {
      this.expanded = this.updateConnectionState();
      this.expandedTimeout = this.timeoutFor(this.expandedTimeout, this.expanded, () => {
        this.expanded = false;
      }, this.expandedDuration);
    };
  }
  static create() {
    var _a2, _b;
    const $wnd2 = window;
    if (!((_a2 = $wnd2.Vaadin) === null || _a2 === void 0 ? void 0 : _a2.connectionIndicator)) {
      $wnd2.Vaadin = $wnd2.Vaadin || {};
      $wnd2.Vaadin.connectionIndicator = document.createElement("vaadin-connection-indicator");
      document.body.appendChild($wnd2.Vaadin.connectionIndicator);
    }
    return (_b = $wnd2.Vaadin) === null || _b === void 0 ? void 0 : _b.connectionIndicator;
  }
  render() {
    return lit_exports.html`
      <div class="v-loading-indicator ${this.loadingBarState}" style=${this.getLoadingBarStyle()}></div>

      <div
        class="v-status-message ${classMap({
      active: this.reconnecting
    })}"
      >
        <span class="text"> ${this.renderMessage()} </span>
      </div>
    `;
  }
  connectedCallback() {
    var _a2;
    super.connectedCallback();
    const $wnd2 = window;
    if ((_a2 = $wnd2.Vaadin) === null || _a2 === void 0 ? void 0 : _a2.connectionState) {
      this.connectionStateStore = $wnd2.Vaadin.connectionState;
      this.connectionStateStore.addStateChangeListener(this.connectionStateListener);
      this.updateConnectionState();
    }
    this.updateTheme();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.connectionStateStore) {
      this.connectionStateStore.removeStateChangeListener(this.connectionStateListener);
    }
    this.updateTheme();
  }
  get applyDefaultTheme() {
    return this.applyDefaultThemeState;
  }
  set applyDefaultTheme(applyDefaultTheme) {
    if (applyDefaultTheme !== this.applyDefaultThemeState) {
      this.applyDefaultThemeState = applyDefaultTheme;
      this.updateTheme();
    }
  }
  createRenderRoot() {
    return this;
  }
  updateConnectionState() {
    var _a2;
    const state = (_a2 = this.connectionStateStore) === null || _a2 === void 0 ? void 0 : _a2.state;
    this.offline = state === ConnectionState.CONNECTION_LOST;
    this.reconnecting = state === ConnectionState.RECONNECTING;
    this.updateLoading(state === ConnectionState.LOADING);
    if (this.loading) {
      return false;
    }
    if (state !== this.lastMessageState) {
      this.lastMessageState = state;
      return true;
    }
    return false;
  }
  updateLoading(loading) {
    this.loading = loading;
    this.loadingBarState = LoadingBarState.IDLE;
    this.firstTimeout = this.timeoutFor(this.firstTimeout, loading, () => {
      this.loadingBarState = LoadingBarState.FIRST;
    }, this.firstDelay);
    this.secondTimeout = this.timeoutFor(this.secondTimeout, loading, () => {
      this.loadingBarState = LoadingBarState.SECOND;
    }, this.secondDelay);
    this.thirdTimeout = this.timeoutFor(this.thirdTimeout, loading, () => {
      this.loadingBarState = LoadingBarState.THIRD;
    }, this.thirdDelay);
  }
  renderMessage() {
    if (this.reconnecting) {
      return this.reconnectingText;
    }
    if (this.offline) {
      return this.offlineText;
    }
    return this.onlineText;
  }
  updateTheme() {
    if (this.applyDefaultThemeState && this.isConnected) {
      if (!document.getElementById(DEFAULT_STYLE_ID)) {
        const style = document.createElement("style");
        style.id = DEFAULT_STYLE_ID;
        style.textContent = this.getDefaultStyle();
        document.head.appendChild(style);
      }
    } else {
      const style = document.getElementById(DEFAULT_STYLE_ID);
      if (style) {
        document.head.removeChild(style);
      }
    }
  }
  getDefaultStyle() {
    return `
      @keyframes v-progress-start {
        0% {
          width: 0%;
        }
        100% {
          width: 50%;
        }
      }
      @keyframes v-progress-delay {
        0% {
          width: 50%;
        }
        100% {
          width: 90%;
        }
      }
      @keyframes v-progress-wait {
        0% {
          width: 90%;
          height: 4px;
        }
        3% {
          width: 91%;
          height: 7px;
        }
        100% {
          width: 96%;
          height: 7px;
        }
      }
      @keyframes v-progress-wait-pulse {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.1;
        }
        100% {
          opacity: 1;
        }
      }
      .v-loading-indicator,
      .v-status-message {
        position: fixed;
        z-index: 251;
        left: 0;
        right: auto;
        top: 0;
        background-color: var(--lumo-primary-color, var(--material-primary-color, blue));
        transition: none;
      }
      .v-loading-indicator {
        width: 50%;
        height: 4px;
        opacity: 1;
        pointer-events: none;
        animation: v-progress-start 1000ms 200ms both;
      }
      .v-loading-indicator[style*='none'] {
        display: block !important;
        width: 100%;
        opacity: 0;
        animation: none;
        transition: opacity 500ms 300ms, width 300ms;
      }
      .v-loading-indicator.second {
        width: 90%;
        animation: v-progress-delay 3.8s forwards;
      }
      .v-loading-indicator.third {
        width: 96%;
        animation: v-progress-wait 5s forwards, v-progress-wait-pulse 1s 4s infinite backwards;
      }

      vaadin-connection-indicator[offline] .v-loading-indicator,
      vaadin-connection-indicator[reconnecting] .v-loading-indicator {
        display: none;
      }

      .v-status-message {
        opacity: 0;
        width: 100%;
        max-height: var(--status-height-collapsed, 8px);
        overflow: hidden;
        background-color: var(--status-bg-color-online, var(--lumo-primary-color, var(--material-primary-color, blue)));
        color: var(
          --status-text-color-online,
          var(--lumo-primary-contrast-color, var(--material-primary-contrast-color, #fff))
        );
        font-size: 0.75rem;
        font-weight: 600;
        line-height: 1;
        transition: all 0.5s;
        padding: 0 0.5em;
      }

      vaadin-connection-indicator[offline] .v-status-message,
      vaadin-connection-indicator[reconnecting] .v-status-message {
        opacity: 1;
        background-color: var(--status-bg-color-offline, var(--lumo-shade, #333));
        color: var(
          --status-text-color-offline,
          var(--lumo-primary-contrast-color, var(--material-primary-contrast-color, #fff))
        );
        background-image: repeating-linear-gradient(
          45deg,
          rgba(255, 255, 255, 0),
          rgba(255, 255, 255, 0) 10px,
          rgba(255, 255, 255, 0.1) 10px,
          rgba(255, 255, 255, 0.1) 20px
        );
      }

      vaadin-connection-indicator[reconnecting] .v-status-message {
        animation: show-reconnecting-status 2s;
      }

      vaadin-connection-indicator[offline] .v-status-message:hover,
      vaadin-connection-indicator[reconnecting] .v-status-message:hover,
      vaadin-connection-indicator[expanded] .v-status-message {
        max-height: var(--status-height, 1.75rem);
      }

      vaadin-connection-indicator[expanded] .v-status-message {
        opacity: 1;
      }

      .v-status-message span {
        display: flex;
        align-items: center;
        justify-content: center;
        height: var(--status-height, 1.75rem);
      }

      vaadin-connection-indicator[reconnecting] .v-status-message span::before {
        content: '';
        width: 1em;
        height: 1em;
        border-top: 2px solid
          var(--status-spinner-color, var(--lumo-primary-color, var(--material-primary-color, blue)));
        border-left: 2px solid
          var(--status-spinner-color, var(--lumo-primary-color, var(--material-primary-color, blue)));
        border-right: 2px solid transparent;
        border-bottom: 2px solid transparent;
        border-radius: 50%;
        box-sizing: border-box;
        animation: v-spin 0.4s linear infinite;
        margin: 0 0.5em;
      }

      @keyframes v-spin {
        100% {
          transform: rotate(360deg);
        }
      }
    `;
  }
  getLoadingBarStyle() {
    switch (this.loadingBarState) {
      case LoadingBarState.IDLE:
        return "display: none";
      case LoadingBarState.FIRST:
      case LoadingBarState.SECOND:
      case LoadingBarState.THIRD:
        return "display: block";
      default:
        return "";
    }
  }
  timeoutFor(timeoutId, enabled, handler, delay) {
    if (timeoutId !== 0) {
      window.clearTimeout(timeoutId);
    }
    return enabled ? window.setTimeout(handler, delay) : 0;
  }
  static get instance() {
    return ConnectionIndicator.create();
  }
};
__decorate([
  property({ type: Number })
], ConnectionIndicator.prototype, "firstDelay", void 0);
__decorate([
  property({ type: Number })
], ConnectionIndicator.prototype, "secondDelay", void 0);
__decorate([
  property({ type: Number })
], ConnectionIndicator.prototype, "thirdDelay", void 0);
__decorate([
  property({ type: Number })
], ConnectionIndicator.prototype, "expandedDuration", void 0);
__decorate([
  property({ type: String })
], ConnectionIndicator.prototype, "onlineText", void 0);
__decorate([
  property({ type: String })
], ConnectionIndicator.prototype, "offlineText", void 0);
__decorate([
  property({ type: String })
], ConnectionIndicator.prototype, "reconnectingText", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ConnectionIndicator.prototype, "offline", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ConnectionIndicator.prototype, "reconnecting", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ConnectionIndicator.prototype, "expanded", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ConnectionIndicator.prototype, "loading", void 0);
__decorate([
  property({ type: String })
], ConnectionIndicator.prototype, "loadingBarState", void 0);
__decorate([
  property({ type: Boolean })
], ConnectionIndicator.prototype, "applyDefaultTheme", null);
if (customElements.get("vaadin-connection-indicator") === void 0) {
  customElements.define("vaadin-connection-indicator", ConnectionIndicator);
}
var connectionIndicator = ConnectionIndicator.instance;

export {
  ConnectionState,
  ConnectionStateStore,
  LoadingBarState,
  ConnectionIndicator,
  connectionIndicator
};
//# sourceMappingURL=chunk-SXPXY45V.js.map
